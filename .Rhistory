
library(inline)

src <- '
    Rcpp::IntegerVector vec(vx);
    int prod = 1;
    for (int i=0; i<vec.size(); i++) {
        prod *= vec[i];
    }
    return Rcpp::wrap(prod);
'
funLoop <- cxxfunction(signature(vx="integer"),
                   src, plugin="Rcpp")
funLoop(1L:10L)

  
src <- '
  Rcpp::IntegerVector vec(vx);
  int prod = std::accumulate(vec.begin(), vec.end(),
                             1, std::multiplies<int>());
  return Rcpp::wrap(prod);
'
funVec <- cxxfunction(signature(vx="integer"),
                   src, plugin="Rcpp")
funVec(1L:10L)
'org_babel_R_eoe'

library(inline)

src <- '
    Rcpp::IntegerVector vec(vx);
    int prod = 1;
    for (int i=0; i<vec.size(); i++) {
        prod *= vec[i];
    }
    return Rcpp::wrap(prod);
'
funLoop <- cxxfunction(signature(vx="integer"),
                   src, plugin="Rcpp")
funLoop(1L:10L)

  
src <- '
  Rcpp::IntegerVector vec(vx);
  int prod = std::accumulate(vec.begin(), vec.end(),
                             1, std::multiplies<int>());
  return Rcpp::wrap(prod);
'
funVec <- cxxfunction(signature(vx="integer"),
                   src, plugin="Rcpp")
funVec(1L:10L)


library(rbenchmark)

N <- 10


print(benchmark(funLoop(N, 1L:10L), funVec(N, 1L:10:L),
print(benchmark(f(N,1), g(N,1), h(N,1), j(N,1), k(N,1),
          columns=c("test", "replications",
          "elapsed", "relative"),
          order="relative", replications=10))
'org_babel_R_eoe'
q()
n

foo <- function(x) {

    ## sum of
    ##  -- squares of negatives
    ##  -- exponentials of positives
    s <- sum(ifelse( x < 0,  x*x,  exp(x) ))

    return(s)
}


library(inline)

bar <- cxxfunction(signature(xs="numeric"),
                   plugin="Rcpp", body='

   NumericVector x(xs);

   double s = sum( ifelse( x < 0, x*x, exp(x) ));

   return wrap(s);
')

library(compiler)
cfoo <- cmpfun(foo)

library(rbenchmark)
x <- rnorm(1e5)
benchmark(foo(x), cfoo(x), bar(x),
          columns=c("test", "elapsed", "relative", "user.self", "sys.self"),
          order="relative", replications=10)
'org_babel_R_eoe'

foo <- function(x) {

    ## sum of
    ##  -- squares of negatives
    ##  -- exponentials of positives
    s <- sum(ifelse( x < 0,  x*x,  exp(x) ))

    return(s)
}


library(inline)

cppfoo <- cxxfunction(signature(xs="numeric"),
                   plugin="Rcpp", body='

   NumericVector x(xs);

   double s = sum( ifelse( x < 0, x*x, exp(x) ));

   return wrap(s);
')

library(compiler)
Rcmpfoo <- cmpfun(foo)

library(rbenchmark)
x <- rnorm(1e5)
benchmark(foo(x), Rcmpfoo(x), cppfoo(x),
          columns=c("test", "elapsed", "relative", "user.self", "sys.self"),
          order="relative", replications=10)
'org_babel_R_eoe'

library(inline)

src <- 'double square( double x){
          return x*x ;
        }

       SEXP foo( SEXP xx ){
         NumericVector x(xx) ;
        return sapply( x, square ) ;
       }'

fun <- cxxfunction(signature(numeric), body=src, plugin="Rcpp")

fun(c(1, 3, 5))
'org_babel_R_eoe'
0

library(inline)

src <- 'double square( double x){
          return x*x ;
        }

       SEXP foo( SEXP xx ){
         NumericVector x(xx) ;
        return sapply( x, square ) ;
       }'

fun <- cxxfunction(signature(xx="numeric"), body=src, plugin="Rcpp")

fun(c(1, 3, 5))
'org_babel_R_eoe'
0

foo <- function(x) {

    ## sum of
    ##  -- squares of negatives
    ##  -- exponentials of positives
    s <- sum(ifelse( x < 0,  x*x,  exp(x) ))

    return(s)
}


library(inline)

cppfoo <- cxxfunction(signature(xs="numeric"),
                   plugin="Rcpp", body='

   NumericVector x(xs);

   double s = sum( ifelse( x < 0, x*x, exp(x) ));

   return wrap(s);
')

library(compiler)
Rcmpfoo <- cmpfun(foo)

library(rbenchmark)
x <- rnorm(1e5)
benchmark(foo(x), Rcmpfoo(x), cppfoo(x),
          columns=c("test", "elapsed", "relative", "user.self", "sys.self"),
          order="relative", replications=10)
'org_babel_R_eoe'
q()
n
